@use 'sass:math';

// Remove the unit of a length
// @param {Number} $number - Number to remove unit from
// @return {Number} - Unitless number
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return  math.div($number, $number * 0 + 1);
  }
  @return $number;
}

@function rem($pixels, $context: $browser-context) {
  @return calc(strip-unit($pixels) / strip-unit($context)) * 1rem;
}
// @include css-lock(65, 100, 768, 1200);
@mixin css-lock($min-size: 1, $max-size: 1.4, $min-width: 20, $max-width: 100, $property: font-size, $unit: px) {
  #{$property}: #{$max-size}#{$unit} !important;
  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$max-width} - #{$min-width}))) !important;

  @media (max-width: #{$min-width}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-width: #{$max-width}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}

// @include css-lock-h(65, 100, 630, 950);
@mixin css-lock-h($min-size: 1, $max-size: 1.4, $min-height: 20, $max-height: 100, $property: font-size, $unit: px) {
  #{$property}: #{$max-size}#{$unit} !important;
  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vh - #{$min-height}#{$unit}) / (#{$max-height} - #{$min-height}))) !important;

  @media (max-height: #{$min-height}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-height: #{$max-height}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}

// @include css-lock-full(65, 100, 500, 768, 1920, 9600);
@mixin css-lock-full($min-size: 1, $mid-size: 1.2, $max-size: 1.4,  $min-width: 20, $mid-width: 30, $max-width: 100, $property: font-size, $unit: px) {
  #{$property}: #{$mid-size}#{$unit} !important;

  @media only screen and (max-width: $mid-width + 'px') and (min-width: $min-width + 'px') {
    #{$property}: calc(#{$min-size}#{$unit} + (#{$mid-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$mid-width} - #{$min-width}))) !important;
  }

  @media only screen and (max-width: $max-width + 'px') and (min-width: $mid-width + 'px') {
    #{$property}: calc(#{$mid-size}#{$unit} + (#{$max-size} - #{$mid-size}) * ((100vw - #{$mid-width}#{$unit}) / (#{$max-width} - #{$mid-width}))) !important;
  }

  @media (max-width: #{$min-width}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-width: #{$max-width}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}

// @include css-lock-h-full(65, 100, 200, 630, 950, 1900);
@mixin css-lock-h-full($min-size: 1, $mid-size: 1.2, $max-size: 1.4,  $min-height: 20, $mid-height: 30, $max-height: 100, $property: font-size, $unit: px) {
  #{$property}: #{$mid-size}#{$unit} !important;

  @media only screen and (max-height: $mid-height + 'px') and (min-height: $min-height + 'px') {
    #{$property}: calc(#{$min-size}#{$unit} + (#{$mid-size} - #{$min-size}) * ((100vh - #{$min-height}#{$unit}) / (#{$mid-height} - #{$min-height}))) !important;
  }

  @media only screen and (max-height: $max-height + 'px') and (min-height: $mid-height + 'px') {
    #{$property}: calc(#{$mid-size}#{$unit} + (#{$max-size} - #{$mid-size}) * ((100vh - #{$mid-height}#{$unit}) / (#{$max-height} - #{$mid-height}))) !important;
  }

  @media (max-height: #{$min-height}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-height: #{$max-height}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}


$browser-context: $root-font-size;  

html {
  font-size: #{$root-font-size}px;

  @include low-desktop {
    $min-screen-width: 415;
    $mid-screen-width: 1440;

    @include css-lock(#{calc($min-screen-width * $root-font-size / $mid-screen-width)}, $root-font-size, $min-screen-width, $mid-screen-width);
  }

  @include tablet-only {
    $mid-screen-width: 768;
    $max-screen-width: 1023;

    @include css-lock(
      $root-font-size, #{$root-font-size * calc($max-screen-width / $mid-screen-width)},
      $mid-screen-width,
      $max-screen-width
    );
  }

  @include mobile {
    $min-screen-width: 300;
    $mid-screen-width: 320;
    $max-screen-width: 414;

    @include css-lock-full(#{calc($min-screen-width * $root-font-size / $mid-screen-width)}, $root-font-size, #{calc($max-screen-width * $root-font-size / $mid-screen-width)}, $min-screen-width, $mid-screen-width, $max-screen-width);
  }
}



@mixin wide-desktop-min {
  @media screen and (min-width: #{$wide-desktop-width}) {
    @content;
  }
}

@mixin wide-desktop {
  @media screen and (max-width: #{$wide-desktop-width - 1px}) {
    @content;
  }
}

@mixin desktop-min {
  @media screen and (min-width: #{$desktop-width}) {
    @content;
  }
}

@mixin middle-desktop {
  @media screen and (max-width: #{$middle-desktop-width - 1px}) {
    @content;
  }
}

@mixin middle-desktop-min {
  @media screen and (min-width: #{$middle-desktop-width - 1px}) {
    @content;
  }
}

@mixin low-desktop {
  @media screen and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin low-desktop-only {
  @media screen and (min-width: #{$low-desktop-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin low-desktop-min {
  @media screen and (min-width: #{$low-desktop-width}) {
    @content;
  }
}

@mixin tablet {
  @media screen and (max-width: #{$low-desktop-width - 1px}) {
    @content;
  }
}

@mixin tablet-only {
  @media screen and (min-width: #{$tablet-width}) and (max-width: #{$low-desktop-width - 1px}) {
    @content;
  }
}

@mixin tablet-min {
  @media screen and (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin mobile {
  @media screen and (max-width: #{$tablet-width - 1}) {
    @content;
  }
}

@mixin low-mobile {
  @media screen and (max-width: #{$mobile-width - 1}) {
    @content;
  }
}

// @include css-lock(65, 100, 768, 1200);
@mixin css-lock($min-size: 1, $max-size: 1.4, $min-width: 20, $max-width: 100, $property: font-size, $unit: px) {
  #{$property}: #{$max-size}#{$unit} !important;
  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$max-width} - #{$min-width}))) !important;

  @media (max-width: #{$min-width}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-width: #{$max-width}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}

// @include css-lock-h(65, 100, 630, 950);
@mixin css-lock-h($min-size: 1, $max-size: 1.4, $min-height: 20, $max-height: 100, $property: font-size, $unit: px) {
  #{$property}: #{$max-size}#{$unit} !important;
  #{$property}: calc(#{$min-size}#{$unit} + (#{$max-size} - #{$min-size}) * ((100vh - #{$min-height}#{$unit}) / (#{$max-height} - #{$min-height}))) !important;

  @media (max-height: #{$min-height}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-height: #{$max-height}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}

// @include css-lock-full(65, 100, 500, 768, 1920, 9600);
@mixin css-lock-full($min-size: 1, $mid-size: 1.2, $max-size: 1.4,  $min-width: 20, $mid-width: 30, $max-width: 100, $property: font-size, $unit: px) {
  #{$property}: #{$mid-size}#{$unit} !important;

  @media only screen and (max-width: $mid-width + 'px') and (min-width: $min-width + 'px') {
    #{$property}: calc(#{$min-size}#{$unit} + (#{$mid-size} - #{$min-size}) * ((100vw - #{$min-width}#{$unit}) / (#{$mid-width} - #{$min-width}))) !important;
  }

  @media only screen and (max-width: $max-width + 'px') and (min-width: $mid-width + 'px') {
    #{$property}: calc(#{$mid-size}#{$unit} + (#{$max-size} - #{$mid-size}) * ((100vw - #{$mid-width}#{$unit}) / (#{$max-width} - #{$mid-width}))) !important;
  }

  @media (max-width: #{$min-width}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-width: #{$max-width}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}

// @include css-lock-h-full(65, 100, 200, 630, 950, 1900);
@mixin css-lock-h-full($min-size: 1, $mid-size: 1.2, $max-size: 1.4,  $min-height: 20, $mid-height: 30, $max-height: 100, $property: font-size, $unit: px) {
  #{$property}: #{$mid-size}#{$unit} !important;

  @media only screen and (max-height: $mid-height + 'px') and (min-height: $min-height + 'px') {
    #{$property}: calc(#{$min-size}#{$unit} + (#{$mid-size} - #{$min-size}) * ((100vh - #{$min-height}#{$unit}) / (#{$mid-height} - #{$min-height}))) !important;
  }

  @media only screen and (max-height: $max-height + 'px') and (min-height: $mid-height + 'px') {
    #{$property}: calc(#{$mid-size}#{$unit} + (#{$max-size} - #{$mid-size}) * ((100vh - #{$mid-height}#{$unit}) / (#{$max-height} - #{$mid-height}))) !important;
  }

  @media (max-height: #{$min-height}px) {
    #{$property}: #{$min-size}#{$unit} !important;
  }

  @media (min-height: #{$max-height}px) {
    #{$property}: #{$max-size}#{$unit} !important;
  }
}
